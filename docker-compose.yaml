services:
  app:
    build: .
    #  context: .
    #  dockerfile: Dockerfile
    image: node:bookworm
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER:-your_db_user}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-your_db_password}
      DATABASE_NAME: ${POSTGRES_DB:-your_db_name}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-your_db_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_db_password}
      POSTGRES_DB: ${POSTGRES_DB:-your_db_name}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # no published ports: only available on the internal 'backend' network
    networks:
      - backend
    restart: unless-stopped

  adminer:
    image: adminer:latest
    # bind to localhost only — access via SSH tunnel
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - postgres
    networks:
      - backend
    restart: unless-stopped

  redis:
    image: redis:latest
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-your_redis_password}"]
    volumes:
      - redis_data:/data
    # keep Redis on backend only
    networks:
      - backend
    restart: unless-stopped

  redisinsight:
    image: redis/redisinsight:latest
    ports:
      # bind to localhost only for safety — access via SSH tunnel
      - "127.0.0.1:5540:5540"
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
    networks:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

